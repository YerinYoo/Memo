# 객체 지향 프로그래밍 (Object Oriented Programing)

* 개념
- 객체를 설계 후 조립하는 방식으로 프로그래밍 하는 방법
- 필드에 대한 접근
+) Cf. 절차 지향 프로그래밍 (Procedural Programing)
- 순차적인 처리
- 기능에 의한 함수를 주로 사용
- 대표 언어 : C, php, Python

*특징
- 캡슐화 : 내부에서 무슨 일이 일어나는지 알 수 없도록 숨겨져 있음 ex. syso >> 출력 but 소스가 어떤지 모름 
- 상속 : 상위 객체의 내용을 물려 받아서 중복 최소화
- 다형성 (오버로드, 오버라이드) : 동일한 이름의 함수가 매개변수의 형태 / 개수에 따라 다른 기능을 수행할 수 있음
* 오버라이드 : 부모 클래스의 함수 내용을 재정의하여 사용
* 오버로드 : 매개변수의 위치를 바꾸거나, 타입을 늘려 사용
- 추상화 : 공통의 속성이나 기능을 묶어서 사용하도록 하는 것

================================================================================================

# 객체 (Object)

* 개념
- 물리적으로 존재하는 것 ex. 자동차, 집 ...
- 개념적으로 존재하는 것 ex. 강의, 주문, 공유 ...

* 구성
- 속성 : filed, var 
- 동작 : method, function

>> 한 데 묶어놓은 것 : 클래스

ex. 클래스 - 자동차 /  속성 - 운전대, 바퀴 .. / 동작 - 전진, 후진 ..

================================================================================================

클래스 : 자바 언어로 짜여진 문서 / 설계도 >> 컴파일되어 메모리에 올라갔을 때 객체라고 부름
해당 객체 중 특정한 무언가를 찍은 것 : 인스턴스

@암기 ; new 연산자, 클래스 생성자 
1. Car(클래스 타입) car(변수명) = new Car(생성자)(); >> Car라는 객체를 생성함
2. 

public static void main : 실행 클래스 
* 메인 메서드가 없을 시, 있는 클래스에서 객체 생성하여 사용함

================================================================================================

# 함수

- 동일한 코드를 2번 이상 사용할 것 같을 시, 클래스에서는 모두 함수
- input은 여러 개 사용 가능, output은 하나만 가능

* 타입 / 통상적으로 input = x, output = y라고 칭함 / 타입에 따라 함수 선언 방식이 달라짐
1.  input, output 모두 있음 (리턴 자료형)
	public  리턴자료형 메서드명 (입력자료형1, 입력변수 1, 입력자료형2, 입력변수 2, ... ) {
		...
	return 리턴값 ;
	}
2.  input, output 모두 없음
3.  input은 있으나 output은 없음
4.  input이 없으나 output이 있음


================================================================================================

# Getter / Setter




