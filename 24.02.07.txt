데이터베이스
+) data : 셀 수 없는 명사 (복수) / datum : 데이터의 단수형 명사

: 여러 사람이 공유하여 사용할 목적으로 체계화해 통합, 관리하는 데이터의 집합

DBMS (Database Management System) : 데이터베이스 관리 시스템
- 데이터베이스를 생성 및 관리해주는 기능을 제공하는 소프트웨어 패키지 / 시스템
- 데이터와 응용 프로그램 사이의 중계자
- 사용자와 SW들이 데이터베이스를 공유할 수 있도록 지원해주는 범용 목적의 소프트웨어 시스템
- 데이터베이스, DBMS, 데이터베이스 시스템을 혼용해서 사용함

DBMS Distribution
1. RDBMS (= RDB (Relational Database Management System))
- 관계형 데이터베이스 관리 시스템 
* 현재 대부분의 DBMS가 여기에 속함

2. NoSQL
- 빅데이터 관련 분야가 속함
* ex. MongoDB


---------------------------------------------------------------------------

RDBMS Configuration
- 2차원 테이블 형태
- 스키마에 의해 생성
* 스키마 (Schema) : 테이블 생성을 위한 설계 문서
- Table Row(행 / 가로) : Tuple (튜플), Record (레코드)
- Table Column (열 / 세로) : Attribute (속성), Field 필드)

# Key
1. Candidate Key (후보키)

2. Primary Key (기본키)

3. Foreign Key (외래키)

# 데이터 관계

- 1 : 1 관계 (one to one)
ex. 게시글에 제목은 하나 뿐 >> 1 : 1
- 1 : n 관계 (one to many)
ex. 한 게시글에 댓글이 세 개 달렸다면 >> 1 : n
- n: n 관계 (many to many)
ex. 네이버 카페 >> 한 회원은 여러 군데의 카페에 가입 가능, 한 카페는 여러 회원을 가질 수 있음

# 데이터 모델링
- 개념 모델링 : 속성을 뽑아 나열 / 대략적인 구조화
- 논리 모델링 : 사람이 이해할 수 있도록 구현한 모델링
- 물리 모델링 : 컴퓨터가 이해할 수 있도록 구현한 모델링

# 스키마
: 데이터 베이스의 구조와 제약 조건에 관련하여 전반적인 명세

# Normalization (정규화)
- 데이터베이스의 설계를 재구성하는 테크닉
* 목표 : 테이블 간에 중복된 데이터 허용 X
*중복된 데이터를 허용하지 않음으로써 무결성을 유지할 수 있으며, DB의 저장 용량 줄일 수 있음

1. 제 1 정규화
: 테이블의 칼럼이 원자값 (=하나의 값)을 갖도록 테이블 분해
ex. 전화번호 010-4951-5254 >> 010 / 4951 / 5254 따로 칼럼 값으로 들어감

2. 제 2 정규화
: 제 1 정규화를 진행한 테이블에 대해 완전 함수 종속을 만족하도록 테이블 분해

3. 제 3 정규화 
: 제 2 정규화를 진행한 테이블에 대해 이행적 종속을 없애도록 테이블 분해

4. BCNF 정규화
: 제 3 정규화를 진행한 테이블에 대해 모든 결정자가 후보키가 되도록 테이블 분해

-------------------------------------------------------------

SQL (Structured Query Language)
: 관계형 데이터베이스 관리 시스템 (RDBMS)의 데이터를 관리하기 위해 설계된 특수 목적의 프로그래밍 언어

* 분류
- 데이터 정의 언어 (DDL (Data Definition Language))
: create, drop, alter...
- 데이터 조작 언어 (DML (Data Manipulation Language)) >> 실무에서 주로 사용하게 되는 언어!
: select, insert, update, delete ...
- 데이터 제어 언어 (DCL (Data Control Language))
: commit, rollback, grant, revoke, deny ...

# Index
- 테이블에서 원하는 데이터를 빠르게 찾기 위해 사용
- 자주 사용되는 필드 값으로 만들어진 원본 테이블의 사본
- 지정한 칼럼들을 기준으로 메모리 영역에 일종의 목차 생성
- select 성능을 향상시킴
- 인덱스의 갯수는 3-4개 정도가 적당
- 카디널리티 (Cardinality - 해당 칼럼의 중복된 수치)가 가장 높은 것을 인덱스로 선정하는 것이 굿
* 성별 / 학년 ... >> 카디널리티 낮음, 주민등록번호 / 계좌번호 ... >> 카디널리티 높음
* 여러 칼럼으로 인덱스를 잡는다면 카디널리티가 높은 순 -> 낮은 순

# View Table
: 가상의 테이블 / 볼 수는 있으나 실체는 없음 (물리적으로 생성 X)

* create
CREATE VIEW { view_table_name}
AS
{select query}
* drop
DROP VIEW {view_table_name}
* alter
ALTER VIEW {view_table_name}
AS
	{select query}

# Trigger
- 테이블에 어떤 신호가 가해졌을 때 미리 정해진 활동이 자동으로 실행
-특정 테이블에 insert, delete, update 같은 "DML"문이 수행될 때, 데이터베이스에서 자동으로 동작

# 관계
[https://blog.naver.com/minj2477/222063054090]

1.  식별 관계(= Indenitifying) / 실선
- 부모 테이블의 기본 키 / 복합 키가 자식 테이블의 구성원으로 전이되는 식별 관계
- 부모가 자식의 모든 데이터를 저장하게 됨
- 테이블 관계가 깊어질 수록 키 값이 증가 >> 개발 시 키 값을 지속적으로 where 구문에 넣어주어야 하는 번거로움 발생

2. 비식별 관계 (= Non-Indenitifying) / 점선
- 자식 테이블의 일반 속성 그룹의 구성원으로 전이되는 비식별 관계
- 부모 없이 자식이 생기는 경우
+)  식별 관계 사용 시 개발 시 발생하는 번거로움으로 인해 비식별관계를 사용하는 경우가 많음


* 이론상으로는 식별 관계를 많이 사용하는 것이 맞으나, 실무 상에서는 비식별 관계를 주로 사용

---------------------------------------------------------------------------------------------------------------------

# MySQL 숫자형 데이터 타입
-정수형 데이터 타입
-
: TINYINT, SMALLINT, MEDIUMINT, INT, BIGINT

# MySQL 문자형 데이터 타입
: CHAR, VARCHAR(n) - n에 문자의 길이 넣음 / 가장 많이 씀, TINYTEXT, TEXT, MEDIUMTEXT, LONGTEXT

# MySQL 날짜 데이터 타입
: DATE, TIME, DATETIME, TIMESTAMP, YEAR

# MySQL 실수 데이터 타입
: DECIMA, FLOAT, DOUBLE >> Double 가장 많이 사용 - 금액, 통화, 퍼센테이지 값 사용 
- _________(n) : n에 소숫점 n의 자리 입력


------------------------------------------------------------------------------------------------------------------------


