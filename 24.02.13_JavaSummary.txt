상수 : Constant >> 내부에 들어있는 값을 변경할 수 없음 변경하려 하면 에러 ex. PI = 3.14 .... 변경 불가

변수 : variable
1. 원시 (Primitive) : int >> 메모리 내부의 '10'이라는 데이터를 꺼냄
2. 레퍼런스 (참조형) : Intefer, String >> 메모리 내부에 있는 공간의 주소를 꺼냄
+) 레퍼런스 타입 : syso 하여 데이터를 봐도 무슨 내용인지 알 수 없음 >> 주솟값을 불러오기 때문에 >> 주소 내부의 데이터 값을 지정해야 함

* Null : 공백도, 0도 아닌 아무것도 없는 것 >> 레퍼런스 타입에서만 허용됨 / 원시 타입에서 허용 X
* P 타입 : 사람이 직접 볼 수 있는 타입 ex. 10, SKT, ...
* R 타입 : 레퍼런스 타입 >> 내부를 보았을 때 어떠한 기능을 하는지 알아볼 수 없는 것이 들어감??????

정수 : int
실수 : float, double
문자 : String
+) 자바 데이터 타입 [https://inpa.tistory.com/entry/JAVA-%E2%98%95-%EA%B8%B0%EB%B3%B8-%EC%9E%90%EB%A3%8C%ED%98%95-%EC%A2%85%EB%A5%98-%EC%B4%9D%EC%A0%95%EB%A6%AC-int-double-char-String]


*Enum Type : SQL Code Table을 자바로 선언한 것과 비슷하나 DB Code Table을 더 많이 사용


* 변수 : 단 하나의 값을 저장할 수 있는 메모리 공간(나중에 값을 변경하게 되면 기존에 저장되어 있던 값이 지워지고 가장 마지막에 수정한 값이 변수의 값이 된다.)

* 상수 : 처음에 정해놓은 값이 바뀌지 않고 끝까지 가는 값(중간에 수정 불가. 물론 선언할 때 초기화하지 않았다면 단 한번 정할 수 있다.)


-----------------------------------

Boolean, int, double, char (데이터 값의 사이즈가 변하지 않는 문자) 

-----------------------------------

형 변환
1. 자동형변환
: byte > short > int > long > float > double
* 작은 것에서 큰 것으로 가는 데에는 문제 발생 X

2. 강제형변환 (casting)
* 참고형변환 : String > int : Integer.parseInt(StringValue)
 			 int > String : String.valueOf(intValue)

3. 사칙연산에서의 자동 타입 변환
 : (큰 타입) +-*/ (작은 타입) = 큰 타입

---------------------------------------

Array = 사다리와 비슷 / 사다리 칸 마다 데이터를 입력, 사다리 안에는 같은 데이터 타입만 입력 가능
*사이즈를 초기에 지정하면 이후에 길이를 늘리기 어렵기 때문에 잘 사용하지 않음

---------------------------------------

# 조건문

1. If문
if1. if () { }~ else { } ~
if2. if() { } else if () { } else { }
*if 내부의 else에 (  ) 사용 시 바로 에러 발생 / else if는 (  ) 사용
*if문 내부의 값은 true / false만 들어갈 수 있음

2. Switch문
: 값이 case와 일치하는지 비교하여 조건에 해당하는 문장만 실행함
* switch문의 조건은 정수형,char, String 타입 사용 가능
* switch - case - break

3. 삼항연산자

+) if문의 사용 빈도가 더 높음
+) switch문은 (  ) 안에 조건이 아닌 값이 들어감

---------------------------------------

# 반복문
: for, while, do while문

1. for문
: for (int i=1; i<=10; i++) { ~~
* i 대신 다른 알파벳 사용 가능

2. while문
* for문으로 대체 가능, 초기값 잡아주지 않을 시 무한 루프 빠질 수도 있음
* 하드웨어 제어 (IoT)시 많이 사용됨

3. do while문
* 거의 사용되지 않음


---------------------------------------

# 기타

1. break
: 반복문 전체 단계 종료
2. continue
: 반복문의 현재 단계만 종료